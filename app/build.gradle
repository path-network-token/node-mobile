import org.ajoberstar.grgit.Grgit

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'com.github.ben-manes.versions'

def shortenedCommitHash = ""
def commitsOnBranchCount = ""
try {
    final def git = Grgit.open(currentDir: projectDir)
    commitsOnBranchCount = git.log(includes: ['HEAD']).size()
    shortenedCommitHash = git.head().getAbbreviatedId()
} catch (ignored) {
}

final def ver = rootProject.ext.versions

final def properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion ver.compileSdk
    defaultConfig {
        applicationId "network.path.mobilenode"
        minSdkVersion ver.minSdk
        targetSdkVersion ver.targetSdk
        versionCode ver.appVersionCode
        versionName ver.appVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [applicationLabel: "Path Mobile"]
    }

    applicationVariants.all { variant ->
        if (variant.buildType.isDebuggable() && commitsOnBranchCount != "") {
            variant.outputs.each { output ->
                output.versionCodeOverride = commitsOnBranchCount
            }
        }
    }

    testOptions {
        junitPlatform {
            unitTests {
                applyDefaultTestOptions true
            }
        }
    }

    signingConfigs {
        release {
            storeFile file(properties.getProperty('keystore.path'))
            storePassword properties.getProperty('keystore.password')
            keyAlias properties.getProperty('keyalias.name')
            keyPassword properties.getProperty('keyalias.password')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.enableCrashlytics = false
            versionNameSuffix "$shortenedCommitHash.${commitsOnBranchCount}.debug"
            applicationIdSuffix = ".debug"
            manifestPlaceholders = [applicationLabel: "Path Mobile Dev"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    lintOptions {
//        checkReleaseBuilds false
//        // Or, if you prefer, you can continue to check for errors in release builds,
//        // but continue the build even when errors are found:
//        abortOnError false
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "network.path.mobilenode:library:$versions.pathSdk"

    // AndroidX
    implementation "androidx.appcompat:appcompat:$versions.androidX"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "com.google.android.material:material:$versions.materialComponents"
    implementation "android.arch.navigation:navigation-fragment:$versions.navigation"
    kapt "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"

    // Ktx
    implementation "androidx.core:core-ktx:$versions.androidCoreKtx"
    implementation "androidx.fragment:fragment-ktx:$versions.androidFragmentKtx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    // DI
    implementation "org.koin:koin-core:$versions.koin"
    implementation "org.koin:koin-android:$versions.koin"
    implementation "org.koin:koin-androidx-viewmodel:$versions.koin"
    implementation "org.koin:koin-androidx-scope:$versions.koin"
    implementation "org.koin:koin-android-architecture:$versions.koinArchitecture"

    // Misc
    implementation "com.jakewharton.timber:timber:$versions.timber"
    implementation "org.jsoup:jsoup:$versions.jsoup"

    // Crash reporting
    implementation("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics") {
        transitive = true
    }

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$versions.junit"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$versions.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.junit"
    testImplementation "junit:junit:$versions.oldJunit"
    testImplementation "org.assertj:assertj-core:$versions.assertJ"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.mockito:mockito-inline:$versions.mockito"
    testImplementation "com.nhaarman:mockito-kotlin:$versions.mockitoKotlin"
    testImplementation "androidx.arch.core:core-testing:$versions.lifecycle"
}
